apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    ext.isReleaseVersion
}

def sonatypeRepositoryUrl

if (isReleaseBuild()) {
    println "RELEASE BUILD $version"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    version += "-SNAPSHOT"
    println "DEBUG BUILD $version"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: project.getProperty("sonatypeUsername"), password: project.getProperty("sonatypePassword"))
                }

                pom.project {
                    name 'Calligraphy'
                    packaging 'jar'
                    artifactId 'calligraphy'
                    url 'https://github.com/chrisjenx/Calligraphy'
                    description 'Android Library which makes setting custom fonts app wide super-sane'
                    inceptionYear '2013'

                    scm {
                        url 'https://github.com/chrisjenx/Calligraphy'
                        connection 'scm:git@github.com:chrisjenx/Calligraphy.git'
                        developerConnection 'scm:git@github.com:chrisjenx/Calligraphy.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'chrisjenx'
                            name 'Christopher Jenkins'
                            email 'chris.mark.jenkins@gmail.com'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java
    }

    task androidJavadocsJar(type: Jar) {
        classifier = 'javadoc'
        //basename = artifact_id
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        //basename = artifact_id
        from android.sourceSets.main.java
    }

    artifacts {
//        archives jarRelease
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}